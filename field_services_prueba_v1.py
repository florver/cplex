# -*- coding: utf-8 -*-
"""field_services_prueba_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VtK-837VCx46lAjZ1qkKbZ7uffZjaDWQ
"""

import sys
import cplex
import numpy as np

TOLERANCE =10e-6 

class Orden:
    def __init__(self):
        self.id = 0
        self.beneficio = 0
        self.trabajadores_necesarios = 0
    
    def load(self, row):
        self.id = int(row[0])
        self.beneficio = int(row[1])
        self.trabajadores_necesarios = int(row[2])
        

class FieldWorkAssignment:
    def __init__(self):
        self.cantidad_trabajadores = 0
        self.cantidad_ordenes = 0
        self.ordenes = []
        self.conflictos_trabajadores = []
        self.ordenes_correlativas = []
        self.ordenes_conflictivas = []
        self.ordenes_repetitivas = []
        self.dias = 6
        self.turnos = 5
        self.costos = [-1000.0,-1200.0,-1400.0,-1500.0]
        self.trozos = [5.0,5.0,5.0,35.0]

    def load(self,filename):
        # Abrimos el archivo.
        f = open(filename)


        # Leemos la cantidad de trabajadores
        self.cantidad_trabajadores = int(f.readline())
        
        # Leemos la cantidad de ordenes
        self.cantidad_ordenes = int(f.readline())
        
        # Leemos cada una de las ordenes.
        self.ordenes = []
        for i in range(self.cantidad_ordenes):
            row = f.readline().split(' ')
            orden = Orden()
            orden.load(row)
            self.ordenes.append(orden)
        
        # Leemos la cantidad de conflictos entre los trabajadores
        cantidad_conflictos_trabajadores = int(f.readline())
        
        # Leemos los conflictos entre los trabajadores
        self.conflictos_trabajadores = []
        for i in range(cantidad_conflictos_trabajadores):
            row = f.readline().split(' ')
            self.conflictos_trabajadores.append(list(map(int,row)))
            
        # Leemos la cantidad de ordenes correlativas
        cantidad_ordenes_correlativas = int(f.readline())
        
        # Leemos las ordenes correlativas
        self.ordenes_correlativas = []
        for i in range(cantidad_ordenes_correlativas):
            row = f.readline().split(' ')
            self.ordenes_correlativas.append(list(map(int,row)))
            
        # Leemos la cantidad de ordenes conflictivas
        cantidad_ordenes_conflictivas = int(f.readline())
        
        # Leemos las ordenes conflictivas
        self.ordenes_conflictivas = []
        for i in range(cantidad_ordenes_conflictivas):
            row = f.readline().split(' ')
            self.ordenes_conflictivas.append(list(map(int,row)))
        
        
        # Leemos la cantidad de ordenes repetitivas
        cantidad_ordenes_repetitivas = int(f.readline())
        
        # Leemos las ordenes repetitivas
        self.ordenes_repetitivas = []
        for i in range(cantidad_ordenes_repetitivas):
            row = f.readline().split(' ')
            self.ordenes_repetitivas.append(list(map(int,row)))
        
        # Cerramos el archivo.
        f.close()


def get_instance_data():
    file_location = sys.argv[1].strip()
    instance = FieldWorkAssignment()
    instance.load(file_location)
    return instance
    


def add_constraint_matrix(my_problem, data):
    
    # Restriccion generica
    #indices = 
    #values = []
    #row = [indices,values]
    #my_problem.linear_constraints.add(lin_expr=[row], senses=['L'], rhs=[])

    # Restricción que no se haga 2 ordenes en mismo turno y día

      for n in range(len(data.ordenes)):
        variables_restriccion = []
        for j in range(data.cantidad_trabajadores):
          variables_restriccion = []
          for d in range(data.dias):
            for t in range(data.turnos):
              variables_restriccion.append('v'+'_'+str(j)+'_'+str(d)+'_'+str(t)+'_'+str(n))
              values = [1]*len(variables_restriccion)
              row = [variables_restriccion, values]
              my_problem.linear_constraints.add(lin_expr=[row], senses=['L'], rhs=[1.0])   

  
def populate_by_row(my_problem, data):

    # Definimos y agregamos las variables.
    coeficientes_beneficio = []
    for j in range(data.cantidad_trabajadores): 
      for d in range(data.dias):
        for t in range(data.turnos):
          for n in range(len(data.ordenes)):
            coeficientes_beneficio.append(data.ordenes[n].beneficio)
    coeficientes_costo = list(np.tile(data.costos, data.cantidad_trabajadores))
    coeficientes_funcion_objetivo = (coeficientes_beneficio + coeficientes_costo)
    
    variables_beneficios = []
    for j in range(data.cantidad_trabajadores): 
      for d in range(data.dias):
        for t in range(data.turnos):
          for n in range(len(data.ordenes)):
            variables_beneficios.append('v'+'_'+str(j)+'_'+str(d)+'_'+str(t)+'_'+str(n))
    
    variables_costos = []
    for j in range(data.cantidad_trabajadores):
      for k in range(len(data.costos)):
        variables_costos.append('x'+'_'+str(j)+'_'+str(k))
        
    my_problem.variables.add(obj = coeficientes_funcion_objetivo, lb =[0]*len(coeficientes_beneficio) + [0]*len(coeficientes_costo), ub = [1]*len(coeficientes_beneficio) + list(np.tile(data.trozos, data.cantidad_trabajadores))
                             , types=['B']*len(coeficientes_beneficio) + ['I']*len(coeficientes_costo), names = (variables_beneficios + variables_costos))


    # Columna para Z_j_d
    variable_z = []
    for j in range(data.cantidad_trabajadores):
      for d in range(data.dias):
        variable_z.append('z'+'_'+str(j)+'_'+str(d))

    my_problem.variables.add(obj = [0.0] * len(variable_z), lb = [0]*len(variable_z), ub = [1]*len(variable_z), types= ['B']*len(variable_z), names = variable_z)


    # Columna para delta_n_d_t
    variable_delta = []
    for n in range(len(data.ordenes_correlativas)):
      for d in range(data.dias):
        for t in range(data.turnos):
          variable_delta.append('delta'+'_'+str(data.ordenes_correlativas[n][0])+'_'+str(d)+'_'+str(t))

    my_problem.variables.add(obj = [0.0] * len(variable_delta), lb = [0]*len(variable_delta), ub = [1]*len(variable_delta), types= ['B']*len(variable_delta), names = variable_delta)


    # Columna para lambda_n_d_t_j
    variable_lambda = []
    for n in range(len(data.ordenes_conflictivas)):
      for d in range(data.dias):
        for t in range(data.turnos):
          for j in range(data.cantidad_trabajadores):
            variable_lambda.append('lambda'+'_'+str(j)+'_'+str(d)+'_'+str(t)+'_'+str(data.ordenes_conflictivas[n][0]))

    my_problem.variables.add(obj = [0.0] * len(variable_lambda), lb = [0]*len(variable_lambda), ub = [1]*len(variable_lambda), types= ['B']*len(variable_lambda), names = variable_lambda)
    
    # Columna para w_j_k
    variables_w = []
    for j in range(data.cantidad_trabajadores):
      for k in range(len(data.costos)):
        variables_w.append('w'+'_'+str(j)+'_'+str(k))
        
    my_problem.variables.add([0.0] * len(variables_w), lb = [0]*len(variables_w), ub = [1]*len(variables_w), types= ['B']*len(variables_w), names = variables_w)


    # Columna para gamma_n

    variables_gamma = []
    for n in range(len(data.ordenes)):
      variables_gamma.append('gamma'+'_'+str(n))

    my_problem.variables.add([0.0] * len(variables_gamma), lb = [0] * len(variables_gamma), ub = [1]*len(variables_gamma), types= ['B']*len(variables_gamma), names = variables_gamma)

    # Seteamos direccion del problema
    my_problem.objective.set_sense(my_problem.objective.sense.maximize)
    # ~ my_problem.objective.set_sense(my_problem.objective.sense.minimize)

    # Definimos las restricciones del modelo. Encapsulamos esto en una funcion. 
    add_constraint_matrix(my_problem, data)

    # Exportamos el LP cargado en myprob con formato .lp. 
    # Util para debug.
    my_problem.write('field_services_prueba.lp')

def solve_lp(my_problem, data):
    
    # Resolvemos el ILP.
    
    my_problem.solve()

    # Obtenemos informacion de la solucion. Esto lo hacemos a traves de 'solution'. 
    #x_variables = my_problem.solution.get_values()
    
    objective_value = my_problem.solution.get_objective_value()
    status = my_problem.solution.get_status()
    status_string = my_problem.solution.get_status_string(status_code = status)

    print('Funcion objetivo: ',objective_value)
    print('Status solucion: ',status_string,'(' + str(status) + ')')

    x = my_problem.solution.get_values(0, my_problem.variables.get_num()-1)
    for j in range(my_problem.variables.get_num()):
      print(j, x[j])

    # Imprimimos las variables usadas.
#    for i in range(len(x_variables)):
        # Tomamos esto como valor de tolerancia, por cuestiones numericas.
        #if x_variables[i] > TOLERANCE:
            #print('x_' + str(data.items[i].index) + ':' , x_variables[i])
#      print(prob_lp.variables.get_num() + ':', x_variables[i])
            #print(x_variables[i])

def main():
    
    # Obtenemos los datos de la instancia.
    data = get_instance_data()
    # ~ print(vars(data))
    # ~ for orden in data.ordenes:
        # ~ print(vars(orden))
    #return
    
    # Definimos el problema de cplex.
    prob_lp = cplex.Cplex()
    
    # Armamos el modelo.
    populate_by_row(prob_lp,data)

    # Resolvemos el modelo.
    solve_lp(prob_lp,data)


if __name__ == '__main__':
    main()